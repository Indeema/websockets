import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable -v QFlow.Websockets 1.0'

Module {
    dependencies: []
    Component {
        name: "QFlow::WebSocketConnection"
        prototype: "QThread"
        exports: ["QFlow.Websockets/WebSocketConnection 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "requestedSubprotocols"; type: "QStringList" }
        Property { name: "uri"; type: "string" }
        Property { name: "subprotocol"; type: "string"; isReadonly: true }
        Signal { name: "closed" }
        Signal { name: "opened" }
        Signal {
            name: "messageReceived"
            Parameter { name: "message"; type: "QByteArray" }
        }
        Method { name: "connect" }
        Method {
            name: "sendBinary"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Method {
            name: "sendText"
            Parameter { name: "msg"; type: "string" }
        }
        Method {
            name: "accept"
            Parameter { name: "accepted"; type: "bool" }
        }
        Method { name: "accept" }
        Method {
            name: "selectSubprotocol"
            Parameter { name: "value"; type: "string" }
        }
        Method {
            name: "responseHeader"
            type: "string"
            Parameter { name: "key"; type: "string" }
        }
        Method { name: "isServer"; type: "bool" }
        Method { name: "close" }
    }
    Component {
        name: "QFlow::WebSocketServer"
        prototype: "QObject"
        exports: ["QFlow.Websockets/WebSocketServer 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "port"; type: "int" }
        Property { name: "host"; type: "string" }
        Signal {
            name: "newConnection"
            Parameter { name: "con"; type: "WebSocketConnection"; isPointer: true }
        }
    }
    Component {
        name: "QThread"
        prototype: "QObject"
        Signal { name: "started" }
        Signal { name: "finished" }
        Method {
            name: "start"
            Parameter { type: "Priority" }
        }
        Method { name: "start" }
        Method { name: "terminate" }
        Method { name: "quit" }
    }
}
